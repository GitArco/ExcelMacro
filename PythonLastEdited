import os
import shutil
import time
from openpyxl import load_workbook
from lxml import etree
import zipfile
import tempfile


def get_excel_file_path():
    while True:
        excel_path = input("Please provide the path to the Excel file: ")
        if os.path.isfile(excel_path) and excel_path.endswith(('.xlsm', '.xlsx')):
            return excel_path
        print("Invalid file path or file type. Please provide a valid Excel file path.")


def create_cancellare_folder():
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    cancellare_path = os.path.join(desktop_path, "Cancellare")
    os.makedirs(cancellare_path, exist_ok=True)
    return cancellare_path


def copy_file_to_cancellare(excel_path, cancellare_path):
    file_name = os.path.basename(excel_path)
    destination_path = os.path.join(cancellare_path, file_name)
    shutil.copy2(excel_path, destination_path)
    return destination_path


def update_excel_metadata(file_path, last_edited_time):
    with zipfile.ZipFile(file_path, 'r') as zip_ref:
        with tempfile.TemporaryDirectory() as tmpdirname:
            zip_ref.extractall(tmpdirname)
            core_xml_path = os.path.join(tmpdirname, 'docProps/core.xml')

            tree = etree.parse(core_xml_path)
            nsmap = {
                'cp': 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',
                'dc': 'http://purl.org/dc/elements/1.1/',
                'dcterms': 'http://purl.org/dc/terms/',
                'dcmitype': 'http://purl.org/dc/dcmitype/',
                'xsi': 'http://www.w3.org/2001/XMLSchema-instance'
            }

            core_properties = tree.xpath('/cp:coreProperties', namespaces=nsmap)
            if core_properties:
                core_property = core_properties[0]
                modified_element = core_property.find('dcterms:modified', namespaces=nsmap)
                if modified_element is not None:
                    modified_element.text = last_edited_time.isoformat() + 'Z'

            tree.write(core_xml_path, xml_declaration=True, encoding='UTF-8')

            with zipfile.ZipFile(file_path, 'w') as zip_write:
                for foldername, subfolders, filenames in os.walk(tmpdirname):
                    for filename in filenames:
                        file_path = os.path.join(foldername, filename)
                        arcname = os.path.relpath(file_path, tmpdirname)
                        zip_write.write(file_path, arcname)


def main():
    try:
        excel_path = get_excel_file_path()
        cancellare_path = create_cancellare_folder()
        destination_path = copy_file_to_cancellare(excel_path, cancellare_path)

        workbook = load_workbook(destination_path, keep_vba=True)
        properties = workbook.properties

        last_edited_time = properties.modified
        last_editor = properties.lastModifiedBy

        print(f"Last edited time: {last_edited_time}")
        print(f"Last editor: {last_editor}")

        print(f"The file has been copied to {destination_path}.")
        input("Make any necessary edits to the file now and then press Enter to continue...")

        # Reload the workbook to ensure changes made by the user are preserved
        workbook = load_workbook(destination_path, keep_vba=True)
        properties = workbook.properties

        # Reassign the original last editor
        properties.lastModifiedBy = last_editor
        workbook.save(destination_path)
        update_excel_metadata(destination_path, last_edited_time)

        last_edited_timestamp = time.mktime(last_edited_time.timetuple())
        os.utime(destination_path, (last_edited_timestamp, last_edited_timestamp))

        updated_workbook = load_workbook(destination_path, keep_vba=True)
        updated_properties = updated_workbook.properties

        print(f"Updated last editor: {updated_properties.lastModifiedBy}")
        print(f"Retained last edited time: {updated_properties.modified}")

    except Exception as e:
        print(f"An error occurred: {e}")


if __name__ == "__main__":
    main()
